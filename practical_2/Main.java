
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.JOptionPane;

public class Main extends javax.swing.JFrame {
    
    private final EntityManagerFactory entity_manager_factory = Persistence.createEntityManagerFactory("$objectdb/db/p2.odb");
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Main.class.getName());

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtCarName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        txtTripName = new javax.swing.JTextField();
        lblName1 = new javax.swing.JLabel();
        btnDeleteCar = new javax.swing.JButton();
        btnFindTrips = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResults = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setText("Car Name");

        lblName1.setText("Trip Name");

        btnDeleteCar.setText("Delete Car");
        btnDeleteCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCarActionPerformed(evt);
            }
        });

        btnFindTrips.setText("Find Car Trips");
        btnFindTrips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindTripsActionPerformed(evt);
            }
        });

        btnAdd.setText("Add Trip");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtResults.setColumns(20);
        txtResults.setRows(5);
        jScrollPane2.setViewportView(txtResults);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtCarName)
                    .addComponent(txtTripName)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnFindTrips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblName)
                            .addComponent(lblName1))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(btnDeleteCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(60, 60, 60)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCarName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)
                        .addComponent(lblName1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTripName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnFindTrips)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDeleteCar)
                        .addGap(28, 28, 28))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        EntityManager entity_manager = entity_manager_factory.createEntityManager();
        try{
            String car_name = txtCarName.getText();
            String trip_name = txtTripName.getText();
            
            if (car_name.isEmpty() || trip_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Car name and trip name are both required.");
                return;
            }
            
            car_name = car_name.substring(0, 1).toUpperCase() + car_name.substring(1).toLowerCase();
            trip_name = trip_name.substring(0, 1).toUpperCase() + trip_name.substring(1).toLowerCase();
            
            entity_manager.getTransaction().begin();

            Car car = entity_manager.find(Car.class, car_name);
            if (car == null) {
                car = new Car(car_name);
            }

            Trip trip = new Trip(trip_name, car);
            car.addTrip(trip); 

            entity_manager.persist(car); 
            entity_manager.persist(trip); 
            entity_manager.getTransaction().commit();

            JOptionPane.showMessageDialog(this, "Car and trip saved successfully.");
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            if (entity_manager.isOpen()) entity_manager.close();
            txtCarName.setText("");
            txtTripName.setText("");
            txtResults.setText("");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnFindTripsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindTripsActionPerformed
        // TODO add your handling code here:
        EntityManager entity_manager = entity_manager_factory.createEntityManager();
        try {
            String car_name = txtCarName.getText();

            if(car_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Car name and trip name are both required.");
                return;
            }

            car_name = car_name.substring(0, 1).toUpperCase() + car_name.substring(1).toLowerCase();

            Car car = entity_manager.find(Car.class, car_name);
            
            if (car == null) {
                JOptionPane.showMessageDialog(this, "No cars found matching \"" + car_name + "\".");
                return;
            }
            
            if (car.getTrips() == null || car.getTrips().isEmpty()) {
                JOptionPane.showMessageDialog(this, "No trips found matching \"" + car_name + "\".");
                return;
            }
            
            StringBuilder sb = new StringBuilder();
            for (Trip t : car.getTrips()) {
                sb.append(String.format("Trip Name: %s\n",t.getTripName()));
            }
            txtResults.setText(sb.toString());
                
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            if (entity_manager.isOpen()) entity_manager.close();
            txtCarName.setText("");
            txtTripName.setText("");
        }
    }//GEN-LAST:event_btnFindTripsActionPerformed

    private void btnDeleteCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCarActionPerformed
        // TODO add your handling code here:
        EntityManager entity_manager = entity_manager_factory.createEntityManager();

        try{
            String car_name = txtCarName.getText();

            if(car_name.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Car name is required.");
                return;
            }

            car_name = car_name.substring(0, 1).toUpperCase() + car_name.substring(1).toLowerCase();
 
            Car car = entity_manager.find(Car.class, car_name);
            if (car != null) {
                entity_manager.getTransaction().begin();
                entity_manager.remove(car);
                entity_manager.getTransaction().commit();
            } else {
                JOptionPane.showMessageDialog(this, "The car you are attempting to delete does not exist.");
                return;
            }
            
            JOptionPane.showMessageDialog(this, "Car and trips deleted successfully.");
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        } finally {
            if (entity_manager.isOpen()) entity_manager.close();
            txtCarName.setText("");
            txtTripName.setText("");
            txtResults.setText("");
        }
    }//GEN-LAST:event_btnDeleteCarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDeleteCar;
    private javax.swing.JButton btnFindTrips;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblName1;
    private javax.swing.JTextField txtCarName;
    private javax.swing.JTextArea txtResults;
    private javax.swing.JTextField txtTripName;
    // End of variables declaration//GEN-END:variables
}
